# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#

version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.0
#  aws-ecs: circleci/aws-ecs@1.1.0

workflows:
  build-and-deploy:
    jobs:
      - build
      - aws-ecr/build-and-push-image:
          filters:
            branches:
              only:
                - master
          requires:
            - build
          attach-workspace: true
          repo: ${PROJECT_NAME}-images
          tag: ${CIRCLE_SHA1}
          # Set to true if you don't want to build the image if it already exists in the ECR repo, for example when
          # you are tagging with the git commit hash. Specially useful for faster code reverts.
          skip-when-tags-exist: false

#          To trigger update using ECS orb, needs to have ',latest' as part of the tag. No longer need this since
#          deployment is done via Terraform.

#          repo: ${PROJECT_NAME}-app
#          tag: ${CIRCLE_SHA1},latest

#          Trigger ECS update using orb; switched over to deploy via Terraform.
#            - aws-ecs/deploy-service-update:
#          requires:
#            - aws-ecr/build-and-push-image # only run this job once aws-ecr/build-and-push-image has completed
#          family: ${PROJECT_NAME}-service
#          cluster-name: ${PROJECT_NAME}-cluster
#          container-image-name-updates: container=${PROJECT_NAME}-image,tag=${CIRCLE_SHA1}

      - terraform-plan:
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
      - terraform-apply:
          filters:
            branches:
              only:
                - master
          requires:
            - aws-ecr/build-and-push-image
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6-alpine

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run build!
      - run: gradle build
      - persist_to_workspace:
        # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
        # taken to be the root directory of the workspace.
          root: .
        # Must be relative path from root
          paths:
            - build/libs
#       Store reports as build artifacts.
      - store_artifacts:
          path: build/reports

      - store_test_results:
          path: build/test-results

  terraform-apply:
      docker:
        - image: hashicorp/terraform:light

      steps:
        - checkout
        - run:
            name: terraform init & apply
            command: |
              cd deployment/fargate-terraform
              terraform init -backend-config="access_key=${DEV_ACCESS_KEY_ID}" -backend-config="secret_key=${DEV_SECRET_ACCESS_KEY}"
              source setup_env.sh
              terraform apply -auto-approve -var-file="prod.tfvars" -var "version_tag=${CIRCLE_SHA1}"

  terraform-plan:
    docker:
      - image: hashicorp/terraform:light

    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd deployment/fargate-terraform
            terraform init -backend-config="access_key=${DEV_ACCESS_KEY_ID}" -backend-config="secret_key=${DEV_SECRET_ACCESS_KEY}"
            source setup_env.sh
            terraform plan -var-file="prod.tfvars" -var "version_tag=${CIRCLE_SHA1}"






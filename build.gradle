plugins {
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id("com.github.node-gradle.node") version "2.2.0"
}

group = 'com.tucklets'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	compile group: 'org.postgresql', name: 'postgresql', version: '42.2.11'
	compile group: 'org.apache.poi', name: 'poi', version: '4.1.2'
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2'
	compile group: 'org.apache.commons', name: 'commons-text', version: '1.8'
	compile group: 'com.google.zxing', name: 'core', version: '3.4.0'
	compile group: 'com.google.zxing', name: 'javase', version: '3.4.0'
	compile group: 'com.itextpdf', name: 'itext7-core', version: '7.1.10', ext: 'pom'
	compile group: 'com.itextpdf', name: 'pdfa', version: '7.1.10'
	compile group: 'com.itextpdf', name: 'layout', version: '7.1.10'
	compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.762'
	compile group: 'commons-io', name: 'commons-io', version: '2.6'

}

test {
	useJUnitPlatform()
}

node {
	version = '12.16.3'
	npmVersion = '6.14.5'
	download = true
}

task webpack(type: NodeTask, dependsOn: 'npmInstall') {
	inputs.file("package-lock.json").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("src/main/resources").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.file("webpack.config.js")
	outputs.dir("$buildDir/js")
	outputs.cacheIf { true }
	script = project.file('./node_modules/webpack/bin/webpack.js')
}

clean.doFirst {
	delete "${rootDir}/node_modules/"
	delete "${rootDir}/dist"
	println "Removed node_modules and dist sources."
}

// Add webpack step to bootRun + bootJar
bootRun.dependsOn(webpack)
bootJar.dependsOn(webpack)
